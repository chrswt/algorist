{"version":3,"sources":["../../src/1-29-25horses.js"],"names":["Horse","name","speed","_speed","race","horsesArray","raceNumber","forEach","horse","raceGroup","sort","a","b","stable","startSimulation","numHorses","posA","charCodeAt","raceGroup1","raceGroup2","raceResults1","raceResults2","raceResults3","fastestGroup","secondFastestGroup","thirdFastestGroup","numRaces","i","push","String","fromCharCode","j","slice","k","console","log"],"mappings":";;;;AAAA;;;;;;;;;;;AAWA;;IAEMA,K,GACJ,eAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AAAA;;AACvB,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKE,MAAL,GAAcD,KAAd;AACD,C;;AAGH,IAAME,OAAO,SAAPA,IAAO,CAACC,WAAD,EAAcC,UAAd,EAA6B;AACxC,MAAIA,cAAcA,eAAe,CAAjC,EAAoC;AAClC;AACAD,gBAAYE,OAAZ,CAAoB,UAASC,KAAT,EAAgB;AAClCA,YAAMC,SAAN,GAAkBH,UAAlB;AACD,KAFD;AAGD;;AAEDD,cAAYK,IAAZ,CAAiB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACzB,WAAOD,EAAER,MAAF,GAAWS,EAAET,MAApB;AACD,GAFD;;AAIA,SAAOE,WAAP;AACD,CAbD;;AAeA,IAAMQ,SAAS,EAAf;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,SAAD,EAAe;AACrC;AACA,MAAMC,OAAO,IAAIC,UAAJ,CAAe,CAAf,CAAb;AACA,MAAMC,aAAa,EAAnB;AACA,MAAMC,aAAa,EAAnB;AACA,MAAIC,eAAe,EAAnB;AACA,MAAIC,qBAAJ;AACA,MAAIC,qBAAJ;AACA,MAAIC,qBAAJ;AACA,MAAIC,2BAAJ;AACA,MAAIC,0BAAJ;AACA,MAAIC,WAAW,CAAf;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIZ,SAApB,EAA+BY,GAA/B,EAAoC;AAClCd,WAAOe,IAAP,CAAY,IAAI5B,KAAJ,CAAU6B,OAAOC,YAAP,CAAoBd,OAAOW,CAA3B,CAAV,EAAyCA,CAAzC,CAAZ;AACD;;AAED;AACA,OAAK,IAAII,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AAC1BX,iBAAa,UAAUW,CAAvB,IAA4B3B,KAAKS,OAAOmB,KAAP,CAAaD,IAAI,CAAjB,EAAoBA,IAAI,CAAJ,GAAQ,CAA5B,CAAL,EAAqCA,CAArC,CAA5B;AACAL;AACD;;AAED;AACA,OAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AAC1Bf,eAAWU,IAAX,CAAgBR,aAAa,UAAUa,CAAvB,EAA0B,CAA1B,CAAhB;AACD;AACDZ,iBAAejB,KAAKc,UAAL,CAAf;AACAQ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,iBAAeF,aAAa,CAAb,EAAgBZ,SAA/B;AACAe,uBAAqBH,aAAa,CAAb,EAAgBZ,SAArC;AACAgB,sBAAoBJ,aAAa,CAAb,EAAgBZ,SAApC;;AAEAU,aAAWS,IAAX,CAAgBR,aAAa,UAAUG,YAAvB,EAAqC,CAArC,CAAhB;AACAJ,aAAWS,IAAX,CAAgBR,aAAa,UAAUG,YAAvB,EAAqC,CAArC,CAAhB;AACAJ,aAAWS,IAAX,CAAgBR,aAAa,UAAUI,kBAAvB,EAA2C,CAA3C,CAAhB;AACAL,aAAWS,IAAX,CAAgBR,aAAa,UAAUI,kBAAvB,EAA2C,CAA3C,CAAhB;AACAL,aAAWS,IAAX,CAAgBR,aAAa,UAAUK,iBAAvB,EAA0C,CAA1C,CAAhB;;AAEAH,iBAAelB,KAAKe,UAAL,CAAf;AACAO;;AAEAQ,UAAQC,GAAR,CAAY,2BAAZ,EACEd,aAAa,CAAb,CADF,EACmBC,aAAa,CAAb,CADnB,EACoCA,aAAa,CAAb,CADpC;;AAGA,SAAOI,QAAP;AACD,CAvDD;;AAyDAQ,QAAQC,GAAR,CAAYrB,gBAAgB,EAAhB,CAAZ,E,CAAkC","file":"1-29-25horses.js","sourcesContent":["/*\n * The Algorithm Design Manual, 2nd Edition\n * Steven S. Skiena\n * Interview Problems (I-28), p.30\n *\n * 25 HORSES\n * There are 25 horses. At most, 5 horses can race together at a time. You must\n * determine the fastest, second fastest, and third fastest horses. Find the\n * minimum number of races in which this can be done.\n */\n\n/*jshint esversion: 6 */\n\nclass Horse {\n  constructor(name, speed) {\n    this.name = name;\n    this._speed = speed;\n  }\n}\n\nconst race = (horsesArray, raceNumber) => {\n  if (raceNumber || raceNumber === 0) {\n    // Only assign a race group for the first race\n    horsesArray.forEach(function(horse) {\n      horse.raceGroup = raceNumber;\n    });\n  }\n\n  horsesArray.sort((a, b) => {\n    return a._speed < b._speed;\n  });\n\n  return horsesArray;\n};\n\nconst stable = [];\n\nconst startSimulation = (numHorses) => {\n  // Populate the stable with horses of varying speeds\n  const posA = 'a'.charCodeAt(0);\n  const raceGroup1 = [];\n  const raceGroup2 = [];\n  let raceResults1 = {};\n  let raceResults2;\n  let raceResults3;\n  let fastestGroup;\n  let secondFastestGroup;\n  let thirdFastestGroup;\n  let numRaces = 0;\n\n  for (let i = 0; i < numHorses; i++) {\n    stable.push(new Horse(String.fromCharCode(posA + i), i));\n  }\n\n  // Split the horses into 5 groups of 5 and race them\n  for (let j = 0; j < 5; j++) {\n    raceResults1['group' + j] = race(stable.slice(j * 5, j * 5 + 5), j);\n    numRaces++;\n  }\n\n  // Race the fastest of each group to eliminate other horses\n  for (let k = 0; k < 5; k++) {\n    raceGroup1.push(raceResults1['group' + k][0]);\n  }\n  raceResults2 = race(raceGroup1);\n  numRaces++;\n\n  // We now know that the slowest 2 groups do not contain any of the 3 fastest\n  // horses. We also know that the 2nd and 3rd horses in the 3rd fastest group\n  // and the 3rd fastest horse in the 2nd fastest group are not part of the 3\n  // fastest. Therefore, we are left with 6 horses (the top 3 from group A,\n  // the top 2 from group B, and the top 1 from group C). We already know that\n  // the fastest horse from the fastest group is the absolute fastest horse,\n  // so we can simply race the remaining 5 and take the next 2 fastest.\n\n  fastestGroup = raceResults2[0].raceGroup;\n  secondFastestGroup = raceResults2[1].raceGroup;\n  thirdFastestGroup = raceResults2[2].raceGroup;\n\n  raceGroup2.push(raceResults1['group' + fastestGroup][1]);\n  raceGroup2.push(raceResults1['group' + fastestGroup][2]);\n  raceGroup2.push(raceResults1['group' + secondFastestGroup][0]);\n  raceGroup2.push(raceResults1['group' + secondFastestGroup][1]);\n  raceGroup2.push(raceResults1['group' + thirdFastestGroup][0]);\n\n  raceResults3 = race(raceGroup2);\n  numRaces++;\n\n  console.log('The 3 fastest horses are:',\n    raceResults2[0], raceResults3[0], raceResults3[1]);\n\n  return numRaces;\n};\n\nconsole.log(startSimulation(25)); // 7\n"]}